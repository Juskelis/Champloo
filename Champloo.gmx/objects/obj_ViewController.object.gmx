<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create variables
x = room_width/2;
y = room_height/2;

original_width = view_wview;
original_height = view_hview;

min_size = 0.5;

max_width = (original_width/original_height)*room_height;
max_height = (original_height/original_width)*room_width;

min_width = original_width*min_size;
min_height = original_height*min_size;

//how far the player should be able to see in each direction
player_padding = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move/scale
var count = instance_number(obj_Player);

if(count &gt; 0)
{
    //find center
    var total_x = 0;
    var total_y = 0;
    
    with(obj_Player)
    {
        total_x += x;
        total_y += y;
    }
    
    x = total_x/count;
    y = total_y/count;
    
    
    //find bounds
    var min_x = x;
    var max_x = x;
    var min_y = y;
    var max_y = y;
    
    with(obj_Player)
    {
        min_x = min(clamp(x - other.player_padding, 0, room_width), min_x);
        min_y = min(clamp(y - other.player_padding, 0, room_height), min_y);
        
        max_x = max(clamp(x + other.player_padding, 0, room_width), max_x);
        max_y = max(clamp(y + other.player_padding, 0, room_height), max_y);
    }
    
    var new_width = max(min_width, (original_width/original_height)*(max_y - min_y));
    var new_height = max(min_height, (original_height/original_width)*(max_x - min_x));
    if(new_height &gt; (original_height/original_width)*new_width)
    {
        new_width = (original_width/original_height)*new_height;
    }
    else
    {
        new_height = (original_height/original_width)*new_width;
    }
    
    view_wview = new_width;
    view_hview = new_height;
    
    var approach_speed = 5;
    view_xview = clamp(
        scr_approach(view_xview, x - view_wview/2, approach_speed),
        0, room_width - view_wview
    );
    view_yview = clamp(
        scr_approach(view_yview, y - view_hview/2, approach_speed),
        0, room_height - view_hview
    );
    x = scr_approach(x,total_x/count, approach_speed);
    y = scr_approach(y,total_y/count, approach_speed);
    
    /*
    if(max_x - min_x &lt; min_width)
    {
        if(max_x == room_width)
        {
            min_x = max_x - min_width;
        }
        else
        {
            max_x = min_x + min_width;
        }
    }
    
    if(max_y - min_y &lt; min_height)
    {
        if(max_y == room_height)
        {
            min_y = max_y - min_height;
        }
        else
        {
            max_y = min_y + min_height;
        }
    }
    
    var new_width = (original_width/original_height)*(max_y - min_y);
    var new_height = (original_height/original_width)*(max_x - min_x);
    
    if(new_height &gt; max_y - min_y)
    {
        new_width = (original_width/original_height)*new_height;
    }
    else
    {
        new_height = (original_height/original_width)*new_width;
    }
    
    view_wview = max(new_width, min_width);
    view_hview = max(new_height, min_height);
    
    view_xview = max(0, x - view_wview/2);
    view_yview = max(0, y - view_hview/2);
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
