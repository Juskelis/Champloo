<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_Running</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create global settings
death_time = 1;
default_room_speed = 60;

input_deadzone = 0.1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create movement variables
stunned = false;

stun_delay = 0.5; //in seconds

state = States.Normal;

grav = 0.75*(30/room_speed);
maxgrav = 20*(30/room_speed);
maxspeed = 20*(30/room_speed);

jumping_deadzone = 0.25;
movement_deadzone = 0.5

//external forces (explosion blasts, etc)
force_x = 0;
force_y = 0;
force_decay = 3;

//ground settings
ground_maxspeed = maxspeed*0.65;
acceleration = 1.25*(30/room_speed);

moving_friction = 0;
stopping_friction = acceleration;
turning_friction = 2*acceleration;

walk_off_wall_time = 7/60; //in seconds

blocking_friction = acceleration/4;

previously_on_ground = false;

//air settings
air_acceleration = 1*(30/room_speed);
air_moving_friction = 0.4*air_acceleration;
air_turning_friction = 1*air_acceleration;


hsp = 0;
vsp = 0;

jumpspeed = 20*(30/room_speed);
jumping = false;
movespeed = 0;

player_number = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create sword variables
attacking = false;
throwing = false;
has_sword = !global.stomp_mode;

my_sword = instance_create(x,y, obj_StaticSword);
with(my_sword)
{
    player = other.id;
    //image_angle -= swipe_amount/2;
    offset = abs(other.sprite_width/2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create blocking

max_block = 100;
blocking_shrink_time = 4; //seconds for block to deplete completely
blocking_grow_time = 6; //seconds for block to restore completely

blocking_shrink_step = max_block / (blocking_shrink_time * room_speed);
blocking_grow_step = max_block / (blocking_grow_time * room_speed);

block_level = max_block;

post_block_delay = 0.1;
block_slow = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create input delay variables
jump_input_time = 0;
jump_input_delay = 0.2*room_speed; //frame delay

attack_input_time = 0;
attack_input_delay = 0.2*room_speed; //frame delay

hit = noone;
hit_player_number = noone;
block_window = (12/60)*room_speed; //frames for incorrect timing window for blocking
//parry_window = (18/60)*room_speed;

parry_input_time = 0;
parry_input_delay = (18/60)*room_speed; //frames
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///effects settings
spurt_direction = 0;
scatter = 10;

footstep_frames = 0.1*room_speed;
footstep_frames_sound = 0.2*room_speed;
footstep_frames_wall = footstep_frames/2;
current_frame = 0;
current_frame_sound = 0;
footIndex = audio_play_sound(snd_Footstep, 1, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create dash variables
dash_force = maxspeed*1.5;
can_dash = true;
max_dashes = 3;
available_dashes = max_dashes;
dash_direction = 0;

dash_force_x = 0;
dash_force_y = 0;
dash_decay = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite settings
base_sprite_index = "spr_Player_";
current_sprite_state = "Running";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete player
with(my_sword)
{
    instance_destroy();
}

with(obj_Player_Spawner)
{
    pool[other.player_number] = other.death_time * room_speed;
}

var flyfactor = 20;
with(instance_create(x,y,obj_Corpse))
{
    hsp = other.hsp + lengthdir_x(flyfactor,other.spurt_direction + 180);
    vsp = other.vsp + lengthdir_y(flyfactor,other.spurt_direction + 180);
    
    maxgrav = other.maxgrav;
    maxspeed = other.maxspeed;
    
}

audio_stop_sound(footIndex);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turn off stun
stunned = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reallow dashing
can_dash = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turn off blocking stun
block_slow = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///throw shit!
has_sword = false;

throwing = false;

var deadzone = 0.1;
var attack_dir = abs(aim_direction);
if(abs(horizontal_amount) + abs(vertical_amount) &lt; deadzone)
{
    attack_dir = 0;
    if(image_xscale &lt; 0)
    {
        attack_dir += 180;
    }
}

var thrown = instance_create(x,y,obj_ThrownSword);
with(thrown)
{
    player = other.id;
    player_number = other.player_number;
    attack_direction = attack_dir;
    
    image_angle = attack_direction;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///validate hit

if(hit_player_number != noone)
{
    with(obj_Score)
    {
        scores[other.hit_player_number]++;
    }
    
    if(instance_exists(hit))
    {
        spurt_direction = hit.image_angle + 180;
    }
    
    instance_destroy();
}

hit = noone;
hit_player_number = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turn off attacking
attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
if(!my_sword.active)
{
    switch(state)
    {
        case States.Normal: scr_player_normal(); break;
        case States.InAir: scr_player_inair(); break;
        case States.Dashing: scr_player_dashing(); break;
        case States.WallRiding: scr_player_wallriding(); break;
    }
    
    //change image scale based on direction
    var previous_xscale = image_xscale
    image_xscale = sign(x - xprevious);
    if(image_xscale == 0) image_xscale = previous_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for effects

//foot dust
if(!previously_on_ground &amp;&amp; place_meeting(x,y+1, obj_Wall))
{
    scr_create_many(obj_FootDust, bbox_left, bbox_bottom, bbox_right, bbox_bottom, 5); 
    previously_on_ground = true;
}
previously_on_ground = place_meeting(x, y+1, obj_Wall);

if(state == States.Normal &amp;&amp; abs(hsp) &gt;= ground_maxspeed)
{
    if(current_frame &gt;= footstep_frames)
    {
        instance_create(x, bbox_bottom, obj_FootDust);
        
        current_frame -= footstep_frames;
    }
    current_frame++;
    
    if(current_frame_sound &gt;= footstep_frames_sound)
    {
     //   audio_play_sound(snd_Footstep, 0, false);
        current_frame_sound -= footstep_frames_sound;
    }
    current_frame_sound++;
}

if(state == States.WallRiding &amp;&amp; abs(vsp) &gt;= grav/2)
{
    if(current_frame &gt;= footstep_frames_wall)
    {
        if(place_meeting(x - 1, y, obj_Wall))
            instance_create(bbox_left, y, obj_FootDust);
        else
            instance_create(bbox_right, y, obj_FootDust);
        current_frame -= footstep_frames_wall;
    }
    current_frame++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sounds
if(state == States.Normal &amp;&amp; abs(hsp) &gt;= ground_maxspeed/5)
{
    
    if(audio_is_paused(footIndex))
    {
        audio_resume_sound(footIndex);
    }
    else if(!audio_is_playing(footIndex))
    {
        audio_play_sound(footIndex, 1, true);
    }
    
    //setting volume based on footspeed
   // audio_sound_gain(footIndex, abs(hsp)/ground_maxspeed ,0);
    
}

//if(state != States.Normal &amp;&amp; state != States.Wallriding)
if(state != States.Normal)
{
 
  if(audio_is_playing(footIndex))
  {
    audio_pause_sound(footIndex);
  }
}

if(abs(hsp) &lt; ground_maxspeed/5)
{
  if(audio_is_playing(footIndex))
  {
    audio_pause_sound(footIndex);
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dash
if(can_dash &amp;&amp; key_dash &amp;&amp; !stunned &amp;&amp; available_dashes &gt; 0)// &amp;&amp; false)
{
    dash_direction = aim_direction;
    if(point_distance(0,0,horizontal_amount,vertical_amount) &gt; 0.2)
    {
        dash_force_x = lengthdir_x(maxspeed, aim_direction);
        dash_force_y = lengthdir_y(maxspeed, aim_direction);
    }
    else
    {
        dash_force_x = maxspeed * image_xscale;
        dash_force_y = 0;
    }
    
    with(instance_create(x,y,obj_Trail))
    {
        trail_nodes = 5;
        trail_width = 15;
        trail_distance = 20;
        target = other.id;
        alarm[0] = 0.25*room_speed;
        
        start_transparency = 0.5;
        
        color = scr_player_color(other.id.player_number);

        for(var i = 0; i &lt; trail_nodes; i++)
        {
            trail_x[i] = xstart;
            trail_y[i] = ystart;
        }
    }
    
    can_dash = false;
    alarm[5] = 0.25 * room_speed;
    scr_create_many(obj_FootDust, bbox_left, bbox_top, bbox_right, bbox_bottom, 30);
    
    available_dashes -= 1;
    
    audio_play_sound(snd_Dash, 0, false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///figure out which sprite to use
image_speed = 10/room_speed;

switch(state)
{
    case States.Normal:
        if(abs(hsp) &lt;= ground_maxspeed/8)
            current_sprite_state = "Idle";
        else
            current_sprite_state = "Running";
        break;
    case States.InAir:
        //sprite_index = spr_Player_InAir;
        current_sprite_state = "InAir";
        break;
    case States.WallRiding:
        //sprite_index = spr_Player_WallRiding;
        current_sprite_state = "WallRiding";
        break;
}

if(hit != noone)
{
    current_sprite_state = "Hit";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///swing sword
var deadzone = 0.1;

if(!attacking &amp;&amp; has_sword &amp;&amp; instance_exists(my_sword) &amp;&amp; !block_slow)
{
    if(key_attack_normal)
    {
        var attack_dir = abs(aim_direction);
        if(abs(horizontal_amount) + abs(vertical_amount) &lt; deadzone)
        {
            attack_dir = 0;
            if(image_xscale &lt; 0)
            {
                attack_dir += 180;
            }
        }
        
        with(my_sword)
        {
            attack_direction = attack_dir;
            
            alarm[0] = attack_speed*room_speed;
            
            active = true;
        }
        attacking = true;
        alarm[1] = my_sword.attack_delay * room_speed;
        audio_play_sound(snd_Sword_Swipe, 0, false);
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///throw sword
if(key_shoot_press &amp;&amp; has_sword &amp;&amp; !throwing)
{
    alarm[3] = 1;//room_speed;
    //event_perform(ev_alarm, 3);
    
    throwing = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deplete blocking
if(key_block)
{
    block_slow = true;
    block_level = max(0, block_level - blocking_shrink_step*global.timescale);
    alarm[4] = post_block_delay*room_speed;
}
else
{
    block_level = min(block_level + blocking_grow_step*global.timescale, max_block);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check blocking for hitwindow
if(instance_exists(hit) &amp;&amp; hit != noone)
{
    var blocked = scr_block_check(hit.damage);
    if(blocked)
    {
        hit = noone;
        hit_player_number = noone;
    }
    else if(key_parry)
    {
        //parry happens
        has_sword = true;
        if(instance_exists(hit.player))
        {
            with(hit.player)
            {
                has_sword = false;
            }
        }
        hit = noone;
        hit_player_number = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if KLANG happened



if(instance_exists(hit) &amp;&amp; instance_exists(my_sword) &amp;&amp; my_sword.active)
{
    if(abs(hit.attack_direction - my_sword.attack_direction) &gt; 135)
    {
        if(instance_exists(hit.player))
        {
            var other_player_x = hit.player.x;
            var other_player_y = hit.player.y;
            
            var my_push_dir = point_direction(other_player_x, other_player_y, x, y);
            var other_push_dir = my_push_dir + 180;
            
            var force_amount = maxspeed;
            force_x = lengthdir_x(force_amount, my_push_dir);
            force_y = lengthdir_y(force_amount, my_push_dir);
            
            hit.player.force_x = -force_x;
            hit.player_force_y = -force_y;
            
            with(hit.player)
            {
                hit = noone;
                hit_player_number = noone;
            }
            
            instance_create((x+other_player_x)/2,(y+other_player_y)/2, obj_Flash);
        }    
    
        //deactivate both swords so that we don't redo this
        my_sword.active = false;
        hit.active = false;
        
        hit = noone;
        hit_player_number = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check when outside room
scr_outside_room(max(abs(sprite_height), abs(sprite_width))*5);

/*
if(global.screen_wrapping)
{
    var vertical_outside_window = abs(sprite_height) * 5;
    var horizontal_outside_window = abs(sprite_width) * 5;
    
    if(bbox_top &gt; room_height + vertical_outside_window) y = -sprite_yoffset;
    else if(bbox_bottom &lt; -vertical_outside_window) y = room_height + sprite_yoffset;
    
    if(bbox_left &gt; room_width + horizontal_outside_window) x = -sprite_xoffset;
    else if(bbox_right &lt; -horizontal_outside_window) x = room_width + sprite_xoffset;
}
else
{
    if(bbox_top &gt; room_height) instance_destroy();
    if(bbox_bottom &lt; 0) instance_destroy();
    
    if(bbox_left &gt; room_width) instance_destroy();
    if(bbox_right &lt; 0) instance_destroy();
}
*/
/*
if(y &gt; room_height * 1.5) y = -room_height*0.25;
if(y &lt; -room_height * 0.5) y = room_height*1.25;
if(x &lt; -room_width
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if crushed
if(place_meeting(x,y, obj_Wall))
{
    with(obj_Score)
    {
        scores[other.player_number] = max(0, scores[other.player_number]-1);
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Sword">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for hit

if(other.active &amp;&amp; other.player != id &amp;&amp; hit == noone)
{
    if(!scr_block_check(other.id.damage) &amp;&amp; !key_parry)
    {
        hit = other.id;
        hit_player_number = other.player_number;
        alarm[2] = block_window;
    }
    else if(key_parry)
    {
        //parry!
        has_sword = true;
        if(instance_exists(hit.player))
        {
            with(hit.player)
            {
                has_sword = false;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ThrownSword">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if valid and needed
if(!has_sword &amp;&amp;
    (other.movespeed &lt;= 0 ||
    (other.can_catch &amp;&amp; other.player_number == player_number)))
{
    has_sword = true;
    with(other)
    {
        instance_destroy();
    }
}
else if(other.player_number != player_number &amp;&amp; other.movespeed &gt; 0)
{
    if(!scr_block_check(0))
    {
        respawning = true;
        alarm[0] = death_time * room_speed;
        var othernum = other.player_number;
        with(obj_Score)
        {
            scores[othernum]++;
        }
        spurt_direction = point_direction(x,y, other.x, other.y);
        scr_spawn_blood(random_range(30,60), 0, 180);
        instance_destroy();
    }
    else
    {
        with(other)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create states
enum States
{
    Normal,
    InAir,
    Dashing,
    WallRiding
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw reticule
var radius = 3;
var distance = 30;
var center_x = x + horizontal_amount * distance;
var center_y = y + vertical_amount * distance;
var player_color = scr_player_color(player_number);

draw_set_alpha(0.5);
draw_ellipse_colour(
    center_x - radius,
    center_y - radius,
    center_x + radius,
    center_y + radius,
    player_color,
    player_color,
    false
);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw colored self
var player_sprite_index = base_sprite_index + current_sprite_state;//"spr_Player_";
/*
switch(state)
{
    case States.Normal:
        if(hsp != 0) player_sprite_index += "Running";
        else player_sprite_index += "Idle";
    break;
    
    case States.InAir:
        player_sprite_index += "InAir";
    break;
    
    case States.Dashing:
        player_sprite_index += "Dashing";
    break;
    
    case States.WallRiding:
        player_sprite_index += "WallRiding";
    break;
}
*/

//show_debug_message(player_sprite_index);

draw_sprite_ext(
    asset_get_index(player_sprite_index),
    image_index,
    x,
    y,
    image_xscale,
    image_yscale,
    image_angle,
    c_white,
    1
);

//draw color accents
draw_sprite_ext(
    asset_get_index(player_sprite_index + "_Colors"),
    image_index,
    x,
    y,
    image_xscale,
    image_yscale,
    image_angle,
    scr_player_color(player_number),
    1
);

//draw sword indicator, if it exists
if(has_sword)
{
    draw_sprite_ext(
        asset_get_index(player_sprite_index + "_Hat"),
        image_index,
        x,
        y,
        image_xscale,
        image_yscale,
        image_angle,
        scr_player_color(player_number),
        1
    );
}

/*
if(can_dash)
{
    draw_sprite_ext(
        sprite_index,
        image_index,
        x,
        y,
        image_xscale,
        image_yscale,
        image_angle,
        c_white,
        1
    );
    var colored_sprite = spr_Player_Running_Colors;
    draw_sprite_ext(
        colored_sprite,
        image_index,
        x,
        y,
        image_xscale,
        image_yscale,
        image_angle,
        scr_player_color(player_number),
        1
    );
}
else
{
    draw_sprite_ext(
        spr_Player_Dashing,
        image_index,
        x,
        y,
        image_xscale,
        image_yscale,
        point_direction(0,0,hsp,vsp) - 90,
        scr_player_color(player_number),
        1
    );
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw block
if(key_block &amp;&amp; !attacking)
{
    var block_radius = sprite_width;
    var block_size = (block_level/max_block);
    //draw_circle(x,y, block_radius*(block_level/max_block), false);
    draw_sprite_ext(spr_Block, 0, x,y, block_size,block_size, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw reloading indication
if(attacking &amp;&amp; false)
{
    var timeleft = alarm[1];
    var sprite_num = sprite_get_number(spr_NoAttackIndicator);
    var frame = sprite_num - min(timeleft, sprite_num);
    draw_sprite(spr_NoAttackIndicator, frame, x,y - sprite_height/2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw dash count
var indicator_spacing = abs(sprite_width/max_dashes);
for(var i = 0; i &lt; max_dashes; i++)
{
    if(available_dashes &gt; i)
        draw_set_colour(c_white);
    else
        draw_set_colour(c_black);
    draw_circle(
        x - abs(sprite_width/2) + indicator_spacing/2 + i*indicator_spacing,
        y - abs(sprite_height), indicator_spacing/2,
        false
    );
}
draw_set_colour(c_black);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw sword
if(has_sword)
{
    draw_sprite_ext(spr_Sword, 0, x,y, image_xscale,image_yscale, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
