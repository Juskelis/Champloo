<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create global settings
death_time = 1;
default_room_speed = 60;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create variables
respawning = false;
attacking = false;

state = States.Normal;

grav = 0.75*(30/room_speed);
maxgrav = 20*(30/room_speed);
maxspeed = 20*(30/room_speed);

jumping_deadzone = 0.25;
movement_deadzone = 0.5



//ground settings
ground_maxspeed = maxspeed*0.65;
acceleration = 1.25*(30/room_speed);

moving_friction = 0;
stopping_friction = acceleration;
turning_friction = 2*acceleration;



//air settings
air_acceleration = 1*(30/room_speed);
air_moving_friction = 0.4*air_acceleration;
air_turning_friction = 1*air_acceleration;


hsp = 0;
vsp = 0;

jumpspeed = 20*(30/room_speed);
movespeed = 0;

player_number = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create sword
my_sword = instance_create(x,y, obj_Sword);
with(my_sword)
{
    player = other;
}
sword_speed = 0.1;
sword_attack_delay = sword_speed*5;
sword_offset_x = sprite_width/2;
sword_offset_y = 0;

gun_attack_delay = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create blocking
max_block = 100;
blocking_shrink_time = 1; //seconds for block to deplete completely
blocking_grow_time = 5; //seconds for block to restore completely

blocking_shrink_step = max_block / (blocking_shrink_time * room_speed);
blocking_grow_step = max_block / (blocking_grow_time * room_speed);

block_level = max_block;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create input delay variables
jump_input_time = 0;
jump_input_delay = 0.2*room_speed; //frame delay

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turn off attacking
attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset
respawning = false;


var spawn = scr_furthest_spawn(self);
x = spawn.x;
y = spawn.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
if(!respawning)
{
    switch(state)
    {
        case States.Normal: scr_player_normal(); break;
        case States.InAir: scr_player_inair(); break;
        case States.WallRiding: scr_player_wallriding(); break;
    }
    
    //change image scale based on direction
    var previous_xscale = image_xscale
    image_xscale = sign(x - xprevious);
    if(image_xscale == 0) image_xscale = previous_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attacks
var deadzone = 0.25;


if(!respawning &amp;&amp; !attacking)
{
    var attack_dir = abs(aim_direction);
    if(abs(horizontal_amount) + abs(vertical_amount) &lt; deadzone)
        attack_dir = 90 - image_xscale*90;
    
    if(key_attack_normal || key_attack_back)
    {
        attacking = true;
        alarm[1] = sword_attack_delay * room_speed;
        
        //invert if back attack
        if(key_attack_back)
            attack_dir = (attack_dir+180);
        
        //set offsets
        sword_offset_x = lengthdir_x(sprite_width/2, attack_dir);
        if(image_xscale &lt; 0)
            sword_offset_x = lengthdir_x(sprite_width/2, attack_dir - 180);
        
        sword_offset_y = lengthdir_y(sprite_height/2, attack_dir);
        
        //setup sword
        instance_activate_object(my_sword);
        with(my_sword)
        {
            player_number = other.player_number;
            attack_style = AttackStyles.Swing;
            attack_speed = other.sword_speed;
            attack_direction = attack_dir;
            
            if(attack_direction &lt; 90 || attack_direction &gt; 270)
            {
                start_direction = attack_direction + 45;
                end_direction = start_direction - 90;
            }
            else
            {
                start_direction = attack_direction - 45;
                end_direction = start_direction + 90;
            }
            current_direction = start_direction;
            
            direction_step = (end_direction - start_direction)/(attack_speed*room_speed);
            alarm[0] = attack_speed*room_speed;
            
            image_angle = current_direction;
            image_xscale = (min_size + size_gap/2) + (size_gap/2)*(-sin(degtorad(image_angle)));
        }
    }
    else if(key_shoot)
    {
        attacking = true;
        alarm[1] = gun_attack_delay * room_speed;
        var bullet = instance_create(x,y, obj_Bullet);
        bullet.direction = attack_dir;
        with(bullet)
        {
            number = other.player_number;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///relocate sword
my_sword.x = x + sword_offset_x;
my_sword.y = y + sword_offset_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deplete blocking
if(key_block)
{
    block_level = max(0, block_level - blocking_shrink_step);
}
else
{
    block_level = min(block_level + blocking_grow_step, max_block);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(player_number != other.number)
{
    var blocked = scr_block_check(other.damage);
    if(!respawning &amp;&amp; !blocked)
    {
        respawning = true;
        alarm[0] = death_time*room_speed;
        var othernum = other.number;
        with(obj_Score)
        {
            scores[othernum]++;
        }
    }
        
    with(other)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Sword">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for hit
if(other.id != my_sword.id)
{
    var blocked = scr_block_check(other.damage);
    
    if(!blocked)
    {
        //hit happens!
        show_debug_message(string(other.player.player_number + 1) + " hit " + string(player_number + 1));
        if(!respawning)
        {
            respawning = true;
            alarm[0] = death_time*room_speed;
            var othernum = other.player.player_number;
            with(obj_Score)
            {
                scores[othernum]++;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create states
enum States
{
    Normal,
    InAir,
    WallRiding
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show aiming
var len = 20;
draw_line_width(x,y,x + horizontal_amount*len, y + vertical_amount*len, 3);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw player number
draw_text(x,y,string(player_number));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw block
if(key_block &amp;&amp; !attacking)
{
    var block_radius = sprite_width;
    var block_size = (block_level/max_block);
    //draw_circle(x,y, block_radius*(block_level/max_block), false);
    draw_sprite_ext(spr_Block, 0, x,y, block_size,block_size, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
