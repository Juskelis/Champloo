<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_StaticSword</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create variables
attack_direction = 0;
player = noone;

movespeed = 20; // delta change PER STEP

opacity = 1;
opacity_decay_time = 5; // time in seconds
opacity_decay_step = 1/(opacity_decay_time*room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for collisions
if(movespeed &gt; 0)
{
    var deltax = lengthdir_x(max(movespeed, sprite_width*2), attack_direction);
    var deltay = lengthdir_y(max(movespeed, sprite_width*2), attack_direction);
    
    var inst = collision_line(
        x,y,
        x + deltax, y + deltay,
        obj_Wall,
        false,
        true
    );
    
    if(inst != noone)
    {
        var dx = lengthdir_x(1, attack_direction);
        var dy = lengthdir_y(1, attack_direction);
        while(!place_meeting(x + dx, y + dy, obj_Wall))
        {
            with(obj_Player)
            {
                if(other.player != id &amp;&amp; !respawning)
                {
                    if(place_meeting(x,y, other))
                    {
                        respawning = true;
                        alarm[0] = death_time * room_speed;
                        var othernum = other.player.player_number;
                        with(obj_Score)
                        {
                            scores[othernum]++;
                        }
                    }
                }
            }
            x += dx;
            y += dy;
        }
        x += lengthdir_x(sprite_width/4, attack_direction);
        y += lengthdir_y(sprite_width/4, attack_direction);
        movespeed = 0;
    }
    else
    {
        x += lengthdir_x(movespeed, attack_direction);
        y += lengthdir_y(movespeed, attack_direction);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw line
if(opacity &gt; 0)
{
    draw_set_alpha(opacity);
    draw_line_width_colour(xstart,ystart,x,y,10, c_white, c_white);
    draw_set_alpha(1);
    opacity -= opacity_decay_step;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
