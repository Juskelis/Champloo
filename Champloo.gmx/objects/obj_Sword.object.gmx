<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_StaticSword</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stat variables
attack_speed = 0.05; //in seconds
attack_delay = 0.5; //in seconds

damage = 5;

min_size = 0.75;
max_size = 1.25;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement variables
active = false;

//how far to swipe AFTER passing aim
swipe_amount = 135;

//how fast to move the sword when not attacking
re_aim_speed = 5;

start_direction = swipe_amount/2;

direction_step = 0;

alarm[0] = 0;

size_gap = max_size - min_size;
offset = 0;

attack_direction = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///misc variables
player = noone;
player_number = noone;

image_speed = image_speed/attack_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deactivate the instance
//instance_deactivate_object(self);
active = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update player_number if needed
if(instance_exists(player) &amp;&amp;
    (player_number == noone || player.player_number != player_number))
{
    show_debug_message("updating to " + string(player.player_number));
    player_number = player.player_number;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move

if(active)
{
    var next_image_angle = image_angle;
    next_image_angle += direction_step*global.timescale;
    if(next_image_angle &lt; 0) next_image_angle += 360;
    next_image_angle %= 360;
    
    for(image_angle = image_angle; scr_angle_diff(image_angle, next_image_angle) &gt; 0.1; image_angle = scr_approach_angle(image_angle, next_image_angle, 0.1))
    {
        x = player.x + lengthdir_x(offset, image_angle);
        y = player.y + lengthdir_y(offset, image_angle);
        var coll = instance_place(x,y, obj_Player)
        if(coll != noone)
        {
            with(coll)
            {
                event_perform(ev_collision, object_index);
            }
        }
    }
    image_angle = next_image_angle;
    
}
else
{
    var target_angle = player.aim_direction - swipe_amount;
    if(scr_clockwise_angle(image_angle, player.aim_direction))
        target_angle = player.aim_direction + swipe_amount;
    
    image_angle = scr_approach_angle(image_angle, target_angle, re_aim_speed);
}

x = player.x + lengthdir_x(offset, image_angle);
y = player.y + lengthdir_y(offset, image_angle);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resize
//image_xscale = (min_size + size_gap/2) + (size_gap/2)*(-sin(degtorad(image_angle))) + max_size*vertical_mod;

var player_momentum_dir = point_direction(x,y, x + player.hsp,y + player.vsp);
if(abs(player.hsp) + abs(player.vsp) &lt; 0.1)
{
    player_momentum_dir = 90 - 90*player.image_xscale;
}

// this is basically dot product
var aim_mod = cos(degtorad(player_momentum_dir - attack_direction))*0.5 + 0.5;
var vertical_mod = -sin(degtorad(attack_direction))*0.5 + 0.5;

if(active)
    image_xscale = min_size + ((aim_mod*3 + vertical_mod)/4)*size_gap;
else
    image_xscale = scr_approach(image_xscale, 1, 0.01);
//image_xscale = 1;
/*
var aim_mod = -sin(degtorad(image_angle))*0.5 + 0.5;

image_xscale = min_size + ((aim_mod + vertical_mod)/2)*size_gap;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create enums

enum AttackStyles {
    Swing,
    Stab
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw whoosh
if(active)
{
    //how many degrees should each triangle be?
    var step_delta = 5;
    
    var default_whoosh = abs(direction_step*2);
    var long_whoosh = scr_angle_diff(image_angle, start_direction);
    
    //how far around should we draw in degrees?
    var segment_angle = max(default_whoosh, long_whoosh);
    
    draw_primitive_begin(pr_trianglefan);
    draw_vertex(x,y);
    for(var i = 0; i &lt; segment_angle; i+=step_delta)
    {
        draw_vertex(
            x + lengthdir_x(sprite_width, image_angle - i*sign(direction_step)),
            y + lengthdir_y(sprite_width, image_angle - i*sign(direction_step))
        );
    }
    draw_primitive_end();
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw self
//if(active)
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
